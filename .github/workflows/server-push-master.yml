name: Build and Deploy server

on: [push]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SRC_DIRECTORY: ${{ github.workspace }}/server
      BUILD_DIRECTORY: ${{ github.workspace }}/build
      DEPLOY_DIRECTORY: ${{ github.workspace }}/deploy
      APPLIKATION_NAME: TheBSGame
      AWS_APPLIKATION_NAME: TheBSGame
      AWS_ENVIROMENT_NAME: thebsgame-production
      #version = [Major].[Minor].[Stage].[Build]
      #relase = 3 #stageing = 2 #test = 1
      VERSION: 1.0.1.${{ github.run_number }}
    steps:
      - name: Cargo Cache
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
            ${{ runner.os }}-cargo

      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Release build version ${{ env.VERSION }}
        run: cargo build --release --target-dir ${{ env.BUILD_DIRECTORY }}
        working-directory: ${{ env.SRC_DIRECTORY }}

      - name: Create Deploy directory
        run: mkdir ${{ env.DEPLOY_DIRECTORY }}

      - name: Copy Dockerfile
        run: cp ${{ env.SRC_DIRECTORY }}/Dockerfile ${{ env.DEPLOY_DIRECTORY }}/Dockerfile

      - name: Copy Dockerrun.aws.json
        run: cp ${{ env.SRC_DIRECTORY }}/Dockerrun.aws.json ${{ env.DEPLOY_DIRECTORY }}/Dockerrun.aws.json

      - name: Copy App
        run: cp ${{ env.BUILD_DIRECTORY }}/release/thebsgame-server ${{ env.DEPLOY_DIRECTORY }}/thebsgame-server

      - name: Upload workspace artifact if failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: deploy_${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}.zip
          path: ${{ env.DEPLOY_DIRECTORY }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build_${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}.zip
          path: ${{ env.BUILD_DIRECTORY }}

      - name: Zip deploy package
        run: zip -r ${{ github.workspace }}/${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}_deploy.zip *
        working-directory: ${{ env.DEPLOY_DIRECTORY }}

      - name: Upload deploy package artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy_${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}.zip
          path: ${{ github.workspace }}/${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}_deploy.zip
          

      - name: Beanstalk Deploy my app
        # if: github.ref == 'refs/heads/master'
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY}}
          aws_secret_key: ${{secrets.AWS_SECRET_KEY}}
          application_name: ${{env.APPLIKATION_NAME}}
          environment_name: ${{env.AWS_ENVIROMENT_NAME}}
          region: eu-north-1
          version_label: ${{ env.VERSION }}
          deployment_package: ${{ github.workspace }}/${{ env.APPLIKATION_NAME }}_${{ env.VERSION }}_deploy.zip
          wait_for_deployment: false
          wait_for_environment_recovery: 0